/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as protectedLayoutImport } from './routes/(protected)/layout'
import { Route as authLayoutImport } from './routes/(auth)/layout'
import { Route as IndexImport } from './routes/index'
import { Route as protectedProfileImport } from './routes/(protected)/profile'
import { Route as authSignInImport } from './routes/(auth)/sign-in'

// Create/Update Routes

const protectedLayoutRoute = protectedLayoutImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRoute,
} as any)

const authLayoutRoute = authLayoutImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const protectedProfileRoute = protectedProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => protectedLayoutRoute,
} as any)

const authSignInRoute = authSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => authLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutImport
      parentRoute: typeof rootRoute
    }
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedLayoutImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInImport
      parentRoute: typeof authLayoutImport
    }
    '/(protected)/profile': {
      id: '/(protected)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof protectedProfileImport
      parentRoute: typeof protectedLayoutImport
    }
  }
}

// Create and export the route tree

interface authLayoutRouteChildren {
  authSignInRoute: typeof authSignInRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authSignInRoute: authSignInRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

interface protectedLayoutRouteChildren {
  protectedProfileRoute: typeof protectedProfileRoute
}

const protectedLayoutRouteChildren: protectedLayoutRouteChildren = {
  protectedProfileRoute: protectedProfileRoute,
}

const protectedLayoutRouteWithChildren = protectedLayoutRoute._addFileChildren(
  protectedLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof protectedLayoutRouteWithChildren
  '/sign-in': typeof authSignInRoute
  '/profile': typeof protectedProfileRoute
}

export interface FileRoutesByTo {
  '/': typeof protectedLayoutRouteWithChildren
  '/sign-in': typeof authSignInRoute
  '/profile': typeof protectedProfileRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(auth)': typeof authLayoutRouteWithChildren
  '/(protected)': typeof protectedLayoutRouteWithChildren
  '/(auth)/sign-in': typeof authSignInRoute
  '/(protected)/profile': typeof protectedProfileRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/sign-in' | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/sign-in' | '/profile'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(protected)'
    | '/(auth)/sign-in'
    | '/(protected)/profile'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authLayoutRoute: typeof authLayoutRouteWithChildren
  protectedLayoutRoute: typeof protectedLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authLayoutRoute: authLayoutRouteWithChildren,
  protectedLayoutRoute: protectedLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)",
        "/(protected)"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(auth)": {
      "filePath": "(auth)/layout.tsx",
      "children": [
        "/(auth)/sign-in"
      ]
    },
    "/(protected)": {
      "filePath": "(protected)/layout.tsx",
      "children": [
        "/(protected)/profile"
      ]
    },
    "/(auth)/sign-in": {
      "filePath": "(auth)/sign-in.tsx",
      "parent": "/(auth)"
    },
    "/(protected)/profile": {
      "filePath": "(protected)/profile.tsx",
      "parent": "/(protected)"
    }
  }
}
ROUTE_MANIFEST_END */
